!function(e){var r={};function __webpack_require__(t){if(r[t])return r[t].exports;var s=r[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,__webpack_require__),s.l=!0,s.exports}__webpack_require__.m=e,__webpack_require__.c=r,__webpack_require__.d=function(e,r,t){__webpack_require__.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,r){if(1&r&&(e=__webpack_require__(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(__webpack_require__.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)__webpack_require__.d(t,s,function(r){return e[r]}.bind(null,s));return t},__webpack_require__.n=function(e){var r=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(r,"a",r),r},__webpack_require__.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="wwkO")}({wwkO:function(e,r){class ServiceWorkerUtils{static createUniqueID(){let e=0;return()=>e++}static isValidFTPDFResponse(e){return!("getFTPDFResource"!==e.command||!e.params||"number"!=typeof e.params.uniqueID)}static isValidResponseForRequestURL(e,r){let t=e.data;return!(!t.params||t.params.url!==r||!t.params.content)}static processResourceURL(e,r){let t=e.indexOf("?");-1!==t&&(e=e.substr(0,t));let s=e.indexOf(r);return-1!==s?e.substr(s+r.length+1):e}static getMimeTypeFromFileName(e){let r,t={pdf:"application/pdf",js:"application/javascript",css:"text/css",html:"text/html"};if(null!=e){let s=e.lastIndexOf(".");if(-1!==s){r=t[e.substr(s+1)]}}return null!=r&&""!==r||(r="text/plain"),r}}class RequestHandler{constructor(){this.onmessage=null}callHandler(e){"function"==typeof this.onmessage?this.onmessage(e):console.error("Message Handler Not Set.")}}class ResponseGenerator{static createBlob(e,r,t){return null!=t&&""!==t||(t=ServiceWorkerUtils.getMimeTypeFromFileName(e)),new Blob([r],{type:t})}static getCSPHeaderForResponseStatus(e){return"200"===e?"default-src 'none';form-action 'none';worker-src 'none';script-src 'self';style-src 'self' 'unsafe-inline';font-src 'self';img-src 'self' data:;connect-src 'self';media-src 'self';frame-src 'self';base-uri 'none';block-all-mixed-content;sandbox allow-scripts allow-forms allow-same-origin":"form-action 'none'; default-src 'none'; worker-src 'none'; base-uri 'none'; block-all-mixed-content; sandbox"}static getReferrerHeader(){return"no-referrer"}static createErrorResponse(e){const r=ResponseGenerator.getCSPHeaderForResponseStatus("404");return new Response(e,{status:"404",statusText:"Not Found",headers:{"Content-Security-Policy":r,"Content-type":"text/html","Referrer-Policy":ResponseGenerator.getReferrerHeader()}})}static createSuccessResponse(e){const r=e.data,{url:t,content:s,mimeType:n}=r.params,o=ResponseGenerator.createBlob(t,s,n),a=ResponseGenerator.getCSPHeaderForResponseStatus("200");return new Response(o,{status:"200",statusText:"OK",headers:{"Content-Security-Policy":a,"Content-type":n,"Referrer-Policy":ResponseGenerator.getReferrerHeader()}})}}let t=new class ServiceWorkerManager{constructor(){this.requestHandlerMap={},this.getUniqueID=ServiceWorkerUtils.createUniqueID()}doesRequestHandlerExistsForResourceID(e){return e in this.requestHandlerMap}getRequestHandlerForResourceID(e){return this.requestHandlerMap[e]}storeRequestHandlerForResourceID(e,r){this.requestHandlerMap[e]=r}deleteRequestHandlerForResourceID(e){delete this.requestHandlerMap[e]}getScope(){return self.registration.scope}getServiceWorkerScope(){return this.getScope()}createResourceRequest(e,r){let t=this.getUniqueID(),s=this.getServiceWorkerScope();return this.storeRequestHandlerForResourceID(t,r),{scope:s,url:e,uniqueID:t}}sendResourceRequestToClients(e,r){let t=this.createResourceRequest(e,r);self.clients.matchAll({includeUncontrolled:!0}).then(e=>{for(let r=0;r<e.length;r++)e[r].postMessage(t)})}fetchResourceFromT4(e){return new Promise((r,t)=>{let s=new RequestHandler;s.onmessage=s=>{s.data.error?t(ResponseGenerator.createErrorResponse(s.data.error)):ServiceWorkerUtils.isValidResponseForRequestURL(s,e)?r(ResponseGenerator.createSuccessResponse(s)):t(ResponseGenerator.createErrorResponse("Error Serving Response"))},this.sendResourceRequestToClients(e,s)})}processMessage(e){let r=e.data;if(ServiceWorkerUtils.isValidFTPDFResponse(r)&&this.doesRequestHandlerExistsForResourceID(r.params.uniqueID)){this.getRequestHandlerForResourceID(r.params.uniqueID).callHandler(e),this.deleteRequestHandlerForResourceID(r.params.uniqueID)}}isExternalResourceRequest(e){let r=new URL(e);return self.location.hostname!==r.hostname}processFetch(e){let r=e.request.url;this.isExternalResourceRequest(r)||(r=ServiceWorkerUtils.processResourceURL(decodeURI(r),this.getScope()),e.respondWith(this.fetchResourceFromT4(r)))}};self.addEventListener("install",e=>{e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{e.waitUntil(self.clients.claim())}),self.addEventListener("fetch",e=>{t.processFetch(e)}),self.addEventListener("message",e=>{t.processMessage(e)})}});
